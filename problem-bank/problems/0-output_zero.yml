- id: 0
  name: Output Zero
  description: |-
    欢迎您，Verilog OJ 的用户！~
    Verilog 是为数字电路设计和仿真开发的一种「硬件描述语言」。您要设计的逻辑电路对应着一整块「Verilog Module」，而 Module 内部又可以实例化出之前写好的子 Module。Module 实例化的过程，也就是告诉仿真器和模拟器「如何接线」的过程。
    Verilog 最初是为仿真数字电路所设计，后来才有人将其应用于「综合器」的输入描述中。所谓「仿真 (Simulation)」，就是指用计算机一步一步的模拟数字电路某个时刻的状态，而「综合 (Synthesize)」则是将充满了子 Module，高级硬件描述语言特性的 Module 转化成为一些基本组件的连接的过程。
    正因为 Verilog 在仿真和综合都有应用，所以学习时请您着重区分那些语法结构是「可仿真、可综合」的，哪些只是「可仿真」的。对此，我们的 Verilog OJ 也会有「仿真测试」（即通过仿真器进行测试，并且比对波形）和「综合测试」（综合到寄存器和组合逻辑描述，再仿真或判断等价性）。

    这次的题目旨在帮助您上手 Verilog OJ。请您构造一个没有输入且只有一个输出常值 0 的电路。
  description_input: |-
    这个题目没有输入信号。
  description_output: |-
    这个题目中，您应该输出常值信号 0。

  code_template: |-
    module top_module(
      output out
    );
      // Write your code here
    endmodule
  code_reference: |-
    module top_module(
        output out
    );
        assign out = 0;
    endmodule
  code_testbenches: |-
        module testbench();
            wire y;
            top_module DUT(y);

            // http://www.referencedesigner.com/tutorials/verilog/verilog_62.php
            initial begin
                $dumpfile("out.vcd");
                // This will dump all signal, which may not be useful
                //$dumpvars;

                // dumping only this module
                //$dumpvars(1, testbench);

                // dumping only these variable
                // the first number (level) is actually useless
                $dumpvars(0, y);
            end
            initial begin
                #1;
            end
        endmodule
    